(defun valid-move?(board x y)
  "Check if the move (x, y) is a valid knight move on the chessboard."
  (and (<= x 8) (<= y 8) (>= x 1) (>= y 1) (not (board x y))))

(defun knight-tour (size)
  "Solve the Knight's Tour problem on a chessboard of SIZE x SIZE."
  (setq board (make-array (list (+ size 1) (+ size 1)) :initial-element nil))
  (defun backtrack (x y move-number)
    (if (>= move-number (* size size))
        (return-from knight-tour t))
    (dolist (dx '(1 2 -1 -2))
      (dolist (dy '(1 2 -1 -2))
        (when (and (/= dx dy) (/= dx (- dy)) (valid-move? board (+ x dx) (+ y dy)))
          (setf (aref board (+ x dx) (+ y dy)) move-number)
          (if (backtrack (+ x dx) (+ y dy) (1+ move-number))
              (return-from knight-tour t))
          (setf (aref board (+ x dx) (+ y dy)) nil))))
    nil)
  (if (backtrack 1 1 1)
      (dotimes (i size)
        (dotimes (j size)
          (format t "~3d " (aref board (1+ i) (1+ j))))
        (format t "~%"))
      (format t "No solution.~%")))

(format t "Knight's Tour Solution:~%")
(knight-tour 8)
